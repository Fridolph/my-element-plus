import{_ as i,c as s,o as a,V as l}from"./chunks/framework.8jGixWW7.js";const u=JSON.parse('{"title":"组件 | V-Component","description":"相关思考之组件编写","frontmatter":{"title":"组件 | V-Component","description":"相关思考之组件编写"},"headers":[],"relativePath":"note/1表单组件.md","filePath":"note/1表单组件.md"}'),t={name:"note/1表单组件.md"},e=l(`<h1 id="form-表单" tabindex="-1">Form - 表单 <a class="header-anchor" href="#form-表单" aria-label="Permalink to &quot;Form - 表单&quot;">​</a></h1><p>表单是用户和网站交互最重要的一部分。</p><p>表单有很多控件，这里选了几个简单的模拟实现，就单独整理写到这里了. 表单包含 <code>输入框</code>, <code>单选框</code>, <code>下拉选择</code>, <code>多选框</code> 等用户输入的组件。 使用表单，您可以收集、验证和提交数据。</p><p>典型表单：</p><p>最基础的表单包括各种输入表单项，比如：</p><ul><li>input</li><li>select</li><li>radio</li><li>checkbox</li></ul><p>在每一个 form 组件中，你需要一个 form-item 字段作为输入项的容器，用于获取值与验证值。</p><p>按照原型图整理的简单需求：</p><ul><li>自定义UI <ul><li>整理可自定义</li><li>用户可自定义渲染多种类型的表单元素</li><li>用户可自定义提交区域内容</li></ul></li><li>验证时机 <ul><li>表单元素默认blur时验证，可自定义</li><li>整个表单在点击提交时应全部验证</li></ul></li><li>验证规则 <ul><li>每个input可配置多条规则</li><li>规则可自定义</li></ul></li></ul><h2 id="组件结构设计" tabindex="-1">组件结构设计 <a class="header-anchor" href="#组件结构设计" aria-label="Permalink to &quot;组件结构设计&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: { key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rules: [], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [otherKey]: { key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rules: [], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> :options=&quot;formOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 但这种用法过于繁杂，不灵活，在使用上体现不出结构，会让js臃肿，所以用slot的形式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FormItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;label&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FormItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FormItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;label2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FormItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>开发步骤：</p><ol><li>根据结构，实现基础布局，完成demo</li><li>添加初始化数据，绑定数据</li><li>添加验证</li><li>事件交互，验证等</li><li>不断完善</li></ol><h3 id="验证思路" tabindex="-1">验证思路 <a class="header-anchor" href="#验证思路" aria-label="Permalink to &quot;验证思路&quot;">​</a></h3><p>验证类型：</p><ul><li>表单Form整体验证</li><li>单个表单FormItem的验证</li></ul><p>表单中每项循环验证一次 every 即为表单验证结果</p><p>单个验证实现思路：</p><ul><li>从父组件Form获取对应option、value</li><li>在FormItem组件中实现</li></ul><p>第三方库：<a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noreferrer">async-validator</a></p><hr><h2 id="input-输入框" tabindex="-1">Input - 输入框 <a class="header-anchor" href="#input-输入框" aria-label="Permalink to &quot;Input - 输入框&quot;">​</a></h2><p>表单是用户和网站交互最重要的一部分</p><p>文档地址：</p><p>input: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input</a></p><p>textarea: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea</a></p><h3 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h3><ul><li>支持 input / textarea</li><li>支持不同大小</li><li>应可以一键清空</li><li>支持切换是否不可见（密码或敏感信息输入）</li><li>支持自定义前缀、后缀</li></ul><p>分析出来需要添加的原生属性：</p><ul><li>disabled 已添加</li><li>placeholder 当没有预设值时，出现的文字</li><li>readonly 布尔值，若存在，其中的值不可编辑</li><li>autocomplete 除了 checkbox、radio 和按钮外，表单自动填充特性提示</li><li>autofocus 一个布尔属性，若存在，表示当页面加载完毕该 input 自动拥有焦点</li><li>form 一个字符串，指定该输入与之相关的表单元素</li></ul><h3 id="tdd-开发遇到的一些小问题" tabindex="-1">TDD 开发遇到的一些小问题 <a class="header-anchor" href="#tdd-开发遇到的一些小问题" aria-label="Permalink to &quot;TDD 开发遇到的一些小问题&quot;">​</a></h3><p>在大部分情况下，它能很好地运行，但由于 jsdom 使用模拟 DOM 环境，会和浏览器真实环境有差别，在一些功能上出现问题</p><p>不必纠结完全一致。实际以 demo 浏览器上的表现即可</p><h2 id="switch" tabindex="-1">Switch <a class="header-anchor" href="#switch" aria-label="Permalink to &quot;Switch&quot;">​</a></h2><p>并不是一个标准的 Form 组件</p><ul><li>功能类似 checkbox</li><li>样式独特</li></ul><blockquote><p>一开始 modelValue 只支持 boolean，但这不能满足一定的场景。这里为了扩展，我们增加 string 和 number 的类型支持</p></blockquote><p>扩展 activeText 和 inactiveText</p><blockquote><p>表单组件设计要特别注意和原生表单元素的配合，尽可能实现良好的可访问性</p></blockquote><h2 id="select" tabindex="-1">Select <a class="header-anchor" href="#select" aria-label="Permalink to &quot;Select&quot;">​</a></h2><h3 id="需求分析-1" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析-1" aria-label="Permalink to &quot;需求分析&quot;">​</a></h3><p>进阶版的Dropdown，Input组件和Tooltip组件的组合。类似原生Select，具有以下最基本功能：</p><ul><li>点击展开下拉选项菜单</li><li>点击菜单中的某一项，下拉菜单关闭</li><li>Select获取选中状态，并且填充对应的选项</li></ul><p>其他扩展功能：</p><ul><li>可清空选项：hover后 同Input</li><li>可自定义模版。可自定义下单菜单的选项格式 <ul><li>思路 使用render函数</li><li>这里我们用之前定义的 RenderVnode 即可 (e: SelectOption) =&gt; VNode</li></ul></li><li>可筛选选项，可切换成Input允许输入并过滤下拉选项</li><li>支持远程搜索：类似联想，可根据输入字符发送请求，渲染返回的内容作为选项</li></ul><h3 id="实现筛选功能" tabindex="-1">实现筛选功能 <a class="header-anchor" href="#实现筛选功能" aria-label="Permalink to &quot;实现筛选功能&quot;">​</a></h3><p>思路：</p><ul><li>在本地存储一个可变的响应式对象</li><li>在input时重新计算，渲染新的值</li></ul><p>优化：</p><ul><li>再次选择需要清空input</li><li>再次选择改善placeholder显示，显示当前选中的值</li></ul><h3 id="支持远程搜索" tabindex="-1">支持远程搜索 <a class="header-anchor" href="#支持远程搜索" aria-label="Permalink to &quot;支持远程搜索&quot;">​</a></h3><p>思路：</p><p>在input输入过程中，根据用户传入的remote处理方式，发请求并且渲染结果</p><p>优化：</p><ul><li>debounce防抖 （减少不必要的请求）</li></ul>`,55),n=[e];function h(p,r,k,o,d,E){return a(),s("div",null,n)}const g=i(t,[["render",h]]);export{u as __pageData,g as default};
