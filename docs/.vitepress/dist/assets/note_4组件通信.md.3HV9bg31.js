import{_ as s,c as i,o as a,V as e}from"./chunks/framework.8jGixWW7.js";const m=JSON.parse('{"title":"组件通信","description":"组件通信的几种方式总结","frontmatter":{"title":"组件通信","description":"组件通信的几种方式总结"},"headers":[],"relativePath":"note/4组件通信.md","filePath":"note/4组件通信.md"}'),t={name:"note/4组件通信.md"},n=e(`<h1 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-label="Permalink to &quot;组件通信&quot;">​</a></h1><p>项目差不多做完，趁热打铁，总结一下</p><h2 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;props&quot;">​</a></h2><p>props 父传子</p><h2 id="events" tabindex="-1">events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;events&quot;">​</a></h2><p>直接把变量带进方法 <code>@click=&quot;onClick(status)&quot;</code></p><h2 id="provide-inject" tabindex="-1">provide/inject <a class="header-anchor" href="#provide-inject" aria-label="Permalink to &quot;provide/inject&quot;">​</a></h2><p>FormContext <code>form =&gt; formItem</code></p><p>formItemContext <code>FormItem =&gt; input</code></p><h2 id="scoped-lost" tabindex="-1">Scoped lost <a class="header-anchor" href="#scoped-lost" aria-label="Permalink to &quot;Scoped lost&quot;">​</a></h2><p>FormItem <code>#template</code></p><h2 id="在父组件创建数据结构-在子组件填充数据-子到父也可" tabindex="-1">在父组件创建数据结构，在子组件填充数据（子到父也可） <a class="header-anchor" href="#在父组件创建数据结构-在子组件填充数据-子到父也可" aria-label="Permalink to &quot;在父组件创建数据结构，在子组件填充数据（子到父也可）&quot;">​</a></h2><ol><li>Form =&gt; FormItemContext[]</li><li>子组件FormItem =&gt; onMounted时插入数据（addField）、删除数据（removeField）</li><li>在Form(父组件) 直接调用 FormItem 的具体属性和方法</li></ol><p>如：父组件创建变量 <code>let instances = []</code> 通过方法2 传实例，这样父组件就可以通过instances拿到实例，使用expose的方法和属性了</p><h2 id="pub-sub-发布订阅模型" tabindex="-1">pub/sub 发布订阅模型 <a class="header-anchor" href="#pub-sub-发布订阅模型" aria-label="Permalink to &quot;pub/sub 发布订阅模型&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mitt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;addField&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;removeField&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, { emitter })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emitter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formContextKey)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addField, formItemContext)</span></span></code></pre></div><h2 id="vuex-piano" tabindex="-1">vuex(Piano) <a class="header-anchor" href="#vuex-piano" aria-label="Permalink to &quot;vuex(Piano)&quot;">​</a></h2><p>这里暂用不到</p><h2 id="其他tip" tabindex="-1">其他Tip <a class="header-anchor" href="#其他tip" aria-label="Permalink to &quot;其他Tip&quot;">​</a></h2><ul><li>注意defineExpose，一个好的组件应尽可能为用户提供实例中有用的信息 <ul><li>vue3 新增expose（vue2实例属性都能拿到，杂且不安全）</li></ul></li><li>对于有可能出现的异步操作，尽可能提供Promise</li></ul>`,20),l=[n];function p(h,o,r,d,k,c){return a(),i("div",null,l)}const u=s(t,[["render",p]]);export{m as __pageData,u as default};
