import{_ as i,c as s,o as e,V as t}from"./chunks/framework.8jGixWW7.js";const y=JSON.parse('{"title":"模块化了解","description":"模块化了解","frontmatter":{"title":"模块化了解","description":"模块化了解"},"headers":[],"relativePath":"note/5模块化了解.md","filePath":"note/5模块化了解.md"}'),a={name:"note/5模块化了解.md"},l=t(`<h1 id="为什么要打包" tabindex="-1">为什么要打包 <a class="header-anchor" href="#为什么要打包" aria-label="Permalink to &quot;为什么要打包&quot;">​</a></h1><ul><li>模块化</li><li>可维护性</li><li>可复制性</li></ul><p>模块化定义：以功能块为单位进行程序设计，实现其求解算法的方法称为模块化。</p><p>模块化的目的是为了降低程序复杂度，使程序设计、调试和维护等操作简单化。</p><h2 id="模块化发展史" tabindex="-1">模块化发展史 <a class="header-anchor" href="#模块化发展史" aria-label="Permalink to &quot;模块化发展史&quot;">​</a></h2><p>也可谓是前端进化史</p><h3 id="全局变量-命名空间" tabindex="-1">全局变量 + 命名空间 <a class="header-anchor" href="#全局变量-命名空间" aria-label="Permalink to &quot;全局变量 + 命名空间&quot;">​</a></h3><p>缺点：</p><ul><li>依赖全局变量，污染全局作用域，不安全</li><li>依赖约定命名空间来避免冲突，可靠性不高</li><li>需要手动管理依赖并控制执行顺序，容易出错</li><li>需要再最终上线前手动合并所有用到的模块</li></ul><h3 id="common-js-amd" tabindex="-1">common.js / AMD <a class="header-anchor" href="#common-js-amd" aria-label="Permalink to &quot;common.js / AMD&quot;">​</a></h3><p>common.js 之前很流行，但缺点是没法在浏览器里直接运行</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}</span></span></code></pre></div><h3 id="amd-asynchoronous-module-definition" tabindex="-1">AMD - Asynchoronous module definition <a class="header-anchor" href="#amd-asynchoronous-module-definition" aria-label="Permalink to &quot;AMD - Asynchoronous module definition&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 通过相对路径获取依赖模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 模块产出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>采用异步方式加载模块</li><li>需要在全局环境定义 require 和 define ，不需要其他的全局变量</li><li>通过文件路径和模块自己声明的模块名定位模块</li><li>提供了打包工具自动分析依赖并合并</li><li>配合特定的 AMD 加载器使用，RequireJS</li></ul><h3 id="es6-modules" tabindex="-1">ES6 modules <a class="header-anchor" href="#es6-modules" aria-label="Permalink to &quot;ES6 modules&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过相对路径获取依赖模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./bar&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}</span></span></code></pre></div><ul><li>引入和导出的方式更多</li><li>支持复杂的静态分析</li></ul><h2 id="打包工具的功能和作用" tabindex="-1">打包工具的功能和作用 <a class="header-anchor" href="#打包工具的功能和作用" aria-label="Permalink to &quot;打包工具的功能和作用&quot;">​</a></h2><ul><li>webpack</li><li>vite (通过 Rollup 和 ESBuild)</li></ul><h2 id="学习使用-vite-rollup-实现代码打包" tabindex="-1">学习使用 vite（Rollup）实现代码打包 <a class="header-anchor" href="#学习使用-vite-rollup-实现代码打包" aria-label="Permalink to &quot;学习使用 vite（Rollup）实现代码打包&quot;">​</a></h2><ul><li>代码入口文件</li><li>配置文件</li><li>生成多种文件类型</li><li>生成样式文件</li><li>TypeScript 定义文件 d.ts</li></ul><h3 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h3><p>大型应用使用 webpack 等传统打包工具遇到性能瓶颈：非常慢。而 Vite</p><p>Vite 以 原生 ESM 方式提供源码。实际上是让浏览器接管了打包程序的部分工作</p><p>还是直接看文档来得快些 <a href="https://cn.vitejs.dev/guide/why.html" target="_blank" rel="noreferrer">https://cn.vitejs.dev/guide/why.html</a></p><figure class="svg-image-root"><svg viewBox="0 0 1896 1071" fill="none" xmlns="http://www.w3.org/2000/svg"><text fill="#FFAA3E" xml:space="preserve" style="white-space:pre;" font-size="80" letter-spacing="0em"><tspan x="46" y="132.344">Bundle based dev server</tspan></text><rect x="48" y="239" width="1086" height="767" rx="98" stroke="#FFC36B" stroke-width="4"></rect><rect x="108" y="577" width="212" height="83" rx="10" fill="#C3E88C"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="170" y="631.488">entry</tspan></text><rect x="476" y="712" width="212" height="88" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0.33em"><tspan x="552.5" y="768.988">···</tspan></text><rect x="476" y="438" width="212" height="88" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="537" y="494.988">route</tspan></text><rect x="473" y="576" width="212" height="88" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="534" y="632.988">route</tspan></text><path d="M472.614 481.699L438.815 489.291L462.289 514.766L472.614 481.699ZM324.582 622.18L454.791 502.201L450.726 497.789L320.516 617.768L324.582 622.18Z" fill="#E06666"></path><path d="M469 620L439 602.679V637.321L469 620ZM323 623H442V617H323V623Z" fill="#E06666"></path><path d="M472.614 756.105L462.032 723.12L438.757 748.777L472.614 756.105ZM320.533 622.196L450.601 740.186L454.632 735.742L324.565 617.752L320.533 622.196Z" fill="#E06666"></path><path d="M822.052 905.098L815.036 871.175L789.166 894.213L822.052 905.098ZM689.041 760.243L801.856 886.929L806.337 882.939L693.521 756.253L689.041 760.243Z" fill="#FFC36B"></path><path d="M819.908 756.105L811.894 722.403L786.715 746.195L819.908 756.105ZM689.1 622.034L799.185 738.54L803.546 734.419L693.462 617.914L689.1 622.034Z" fill="#FFC36B"></path><path d="M817.765 623.19L788.215 605.112L787.334 639.742L817.765 623.19ZM691.205 622.973L790.697 625.502L790.85 619.504L691.357 616.975L691.205 622.973Z" fill="#FFC36B"></path><path d="M818.837 481.699L789.286 463.622L788.406 498.252L818.837 481.699ZM692.277 481.483L791.769 484.012L791.922 478.014L692.429 475.485L692.277 481.483Z" fill="#FFC36B"></path><path d="M819.909 340.209L786.924 350.795L812.584 374.067L819.909 340.209ZM696.719 480.499L803.992 362.224L799.547 358.193L692.275 476.468L696.719 480.499Z" fill="#FFC36B"></path><path d="M817.765 614.614L810.467 580.751L784.789 604.002L817.765 614.614ZM692.273 480.497L797.418 596.614L801.866 592.587L696.721 476.47L692.273 480.497Z" fill="#FFC36B"></path><rect x="822" y="288" width="212" height="88" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="864" y="344.988">module</tspan></text><rect x="822" y="435" width="212" height="87" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="864" y="491.488">module</tspan></text><rect x="820" y="571" width="212" height="88" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="862" y="627.988">module</tspan></text><rect x="822" y="718" width="212" height="87" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="864" y="774.488">module</tspan></text><rect x="822" y="864" width="212" height="88" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0.33em"><tspan x="898.5" y="920.988">···</tspan></text><path d="M1239 627L1209 609.679V644.321L1239 627ZM1136 630H1212V624H1136V630Z" fill="#FFC36B"></path><path d="M1596 627L1566 609.679V644.321L1596 627ZM1493 630H1569V624H1493V630Z" fill="#FFC36B"></path><rect x="1239" y="545" width="254" height="144" rx="10" fill="#C692EA"></rect><text fill="white" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="1306.5" y="629.988">Bundle</tspan></text><rect x="1596" y="543" width="254" height="143" rx="10" fill="#009688"></rect><text fill="white" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="1667.71" y="604.988">Server </tspan><tspan x="1675.76" y="649.988">ready</tspan></text></svg></figure><br><figure class="svg-image-root"><svg viewBox="0 0 1896 1071" fill="none" xmlns="http://www.w3.org/2000/svg"><text fill="#FFAA3E" xml:space="preserve" style="white-space:pre;" font-size="80" letter-spacing="0em"><tspan x="45" y="129.344">Native ESM based dev server</tspan></text><rect x="632" y="526" width="273" height="106" rx="10" fill="#C3E88C"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="724.5" y="591.988">entry</tspan></text><rect x="1106" y="699" width="274" height="114" rx="10" fill="#666665"></rect><g filter="url(#filter0_d_5_61)"><text fill="#CCCCCB" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0.33em"><tspan x="1213.5" y="768.988">···</tspan></text></g><rect x="1106" y="346" width="274" height="113" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="1198" y="415.488">route</tspan></text><rect x="1102" y="524" width="273" height="114" rx="10" fill="#666665"></rect><text fill="#CCCCCB" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="1193.5" y="593.988">route</tspan></text><path d="M1101.79 402.463L1067.99 410.054L1091.46 435.529L1101.79 402.463ZM910.168 583.106L1083.96 422.965L1079.9 418.553L906.102 578.693L910.168 583.106Z" fill="#C892E9"></path><path d="M1097 581L1067 563.679V598.321L1097 581ZM908 584H1070V578H908V584Z" fill="#999899"></path><path d="M1101.79 756.57L1091.2 723.584L1067.93 749.242L1101.79 756.57ZM906.119 583.121L1079.77 740.651L1083.8 736.207L910.151 578.677L906.119 583.121Z" fill="#999899"></path><path d="M1552.72 948.839L1545.7 914.916L1519.83 937.953L1552.72 948.839ZM1381.73 761.331L1532.52 930.67L1537 926.68L1386.21 757.341L1381.73 761.331Z" fill="#999899"></path><path d="M1549.95 756.569L1541.94 722.868L1516.76 746.659L1549.95 756.569ZM1381.79 582.96L1529.23 739.005L1533.59 734.884L1386.15 578.839L1381.79 582.96Z" fill="#999899"></path><path d="M1547.19 585.049L1517.64 566.972L1516.76 601.602L1547.19 585.049ZM1383.89 583.898L1520.12 587.362L1520.27 581.364L1384.04 577.9L1383.89 583.898Z" fill="#999899"></path><path d="M1548.57 402.463L1519.02 384.386L1518.14 419.015L1548.57 402.463ZM1385.27 401.312L1521.5 404.776L1521.66 398.778L1385.43 395.314L1385.27 401.312Z" fill="#C892E9"></path><path d="M631.489 585.049L601.583 567.567L601.396 602.207L631.489 585.049ZM375.576 586.666L604.473 587.903L604.506 581.903L375.608 580.666L375.576 586.666Z" fill="#C892E9"></path><path d="M1549.95 219.877L1516.97 230.462L1542.63 253.735L1549.95 219.877ZM1390.34 400.329L1534.04 241.892L1529.59 237.861L1385.89 396.298L1390.34 400.329Z" fill="#C892E9"></path><path d="M1547.19 573.983L1539.89 540.12L1514.21 563.372L1547.19 573.983ZM1385.89 400.327L1526.84 555.983L1531.29 551.956L1390.34 396.3L1385.89 400.327Z" fill="#C892E9"></path><rect x="1553" y="152" width="274" height="113" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="1626" y="221.488">module</tspan></text><rect x="1553" y="341" width="274" height="114" rx="10" fill="#4FC08D"></rect><text fill="#15505C" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="1621.5" y="411.818">module</tspan></text><rect x="1550" y="517" width="274" height="114" rx="10" fill="#666665"></rect><text fill="#CCCCCB" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="1623" y="586.988">module</tspan></text><rect x="1553" y="707" width="274" height="113" rx="10" fill="#666665"></rect><text fill="#CCCCCB" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="1626" y="776.488">module</tspan></text><rect x="1553" y="896" width="274" height="113" rx="10" fill="#666665"></rect><text fill="#CCCCCB" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0.33em"><tspan x="1660.5" y="965.488">···</tspan></text><rect x="45" y="491" width="330" height="179" rx="10" fill="#029788"></rect><text fill="white" xml:space="preserve" style="white-space:pre;" font-size="38" font-weight="600" letter-spacing="0em"><tspan x="154.707" y="570.988">Server </tspan><tspan x="162.76" y="615.988">ready</tspan></text><line x1="507.615" y1="459.201" x2="506.232" y2="569.859" stroke="#C892E9" stroke-width="4" stroke-dasharray="8 8"></line><line x1="1038.78" y1="733.073" x2="1037.37" y2="883.845" stroke="#E06666" stroke-width="4" stroke-dasharray="8 8"></line><text fill="#E06666" xml:space="preserve" style="white-space:pre;" font-size="38" letter-spacing="0em"><tspan x="918" y="938.988">Dynamic import </tspan><tspan x="918" y="983.988">(code split point)</tspan></text><text fill="#C892E9" xml:space="preserve" style="white-space:pre;" font-size="38" letter-spacing="0em"><tspan x="399" y="431.488">HTTP request</tspan></text><defs><filter id="filter0_d_5_61" x="1212.15" y="752.766" width="60.9863" height="13.2324" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood><feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"></feColorMatrix><feOffset dy="4"></feOffset><feGaussianBlur stdDeviation="2"></feGaussianBlur><feComposite in2="hardAlpha" operator="out"></feComposite><feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"></feColorMatrix><feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_5_61"></feBlend><feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_5_61" result="shape"></feBlend></filter></defs></svg></figure><p>依赖：使用 esbuild 进行预构建（由 go 编写的，比 Node.js 快 N 倍）</p><ul><li>处理 CommonJs 以及 UMD 类型文件的兼容性，转换为 ESM 及 ESM 的导入形式</li><li>提高性能，将多个模块合并成单个模块，因为原生 ESM 格式下，一个文件就是一次请求</li><li>缓存，将预构建的依赖项缓存到 node_modules/.vite 中</li></ul><p>源码：包含一些非 JS 标准格式的文件，如 jsx/css/vue 等，时常会被编辑</p><h2 id="发布到-npm" tabindex="-1">发布到 npm <a class="header-anchor" href="#发布到-npm" aria-label="Permalink to &quot;发布到 npm&quot;">​</a></h2><ul><li>本地测试</li><li>注册发布到 npm</li><li>npm hooks</li></ul><h3 id="打包什么类型的文件" tabindex="-1">打包什么类型的文件 <a class="header-anchor" href="#打包什么类型的文件" aria-label="Permalink to &quot;打包什么类型的文件&quot;">​</a></h3><ul><li>CommonJs, ES6 modules 需要特殊的打包工具支持</li><li>AMD 已过时</li><li>浏览器直接使用 （UMD）Universal Module Definition <ul><li>通用 JS 格式</li><li>兼容 Common.js、AMD、浏览器</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> define </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> define.amd) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // AMD. Register as an anonymous module.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], factory)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Node. Does not work with strict CommonJS, but only</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // CommonJS-like environments that supportmodule.exports, like Node</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Browser globals (root is window)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    root.returnExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root.b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})()</span></span></code></pre></div><p>但是，不是推荐格式，因为太大了，不支持 Tree Shaking</p><p>综上：</p><ul><li>首要格式 - ES Module ，并且提供支持 TypeScript 的 type 文件</li><li>备选方案 - UMD</li></ul>`,40),n=[l];function p(h,r,k,o,d,c){return e(),s("div",null,n)}const E=i(a,[["render",p]]);export{y as __pageData,E as default};
